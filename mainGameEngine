# Chump's Challenge
# By Calvin Probst calvin.probst@gmail.com
# https://github.com/calvinProbstSchool/chumpschallenge

import pygame
from pygame.sprite import *
from pygame.locals import *


class ChumpPlayer(Sprite):
    def __init__(self):
        Sprite.__init__(self)

        self.image = pygame.image.load(
            "DKDonkeyKongHesTheLeaderOfTheBunchYouKnowHimWellHesFinallyBackToKickSomeTailHisCoconutGunCanFireInSpurtsIfHeShootsYaItsGonnaHurtHesBiggerFasterAndStrongerTooHesTheFirstMemberOfTheDKCrewHuh.png")
        self.rect = self.image.get_rect()

        self.bX = -1
        self.bY = -1


class BasicTile(Sprite):
    def __init__(self, boardX, boardY, imageFilename, tType):
        Sprite.__init__(self)

        self.image = pygame.image.load(imageFilename)
        self.rect = self.image.get_rect()

        self.bX = boardX
        self.bY = boardY

        self.tileType = tType


    def __str__(self):
        return ("A " + self.tileType + " at " + str(self.bX) + ", " + str(self.bY) + ".")


class BasicItem(Sprite):
    def __init__(self, boardX, boardY, imageFilename, itemType):
        Sprite.__init__(self)

        self.image = pygame.image.load(imageFilename)
        self.rect = self.image.get_rect()

        self.bX = boardX
        self.bY = boardY

        self.itemType = itemType


    def __str__(self):
        return ("A " + self.itemType + " at " + str(self.bX) + ", " + str(self.bY) + ".")


class WallTile(BasicTile):
    def __init__(self, boardX, boardY):
        BasicTile.__init__(self, boardX, boardY, "shesABrickHouse.png", "W")


class IceTile(BasicTile):
    def __init__(self, boardX, boardY):
        BasicTile.__init__(self, boardX, boardY, "iceIceBaby", "I")


class WaterTile(BasicTile):
    def __init__(self, boardX, boardY):
        BasicTile.__init__(self, boardX, boardY, "vvaves(Kanye).png", "w")


class DoorTile(BasicTile):
    def __init__(self, boardX, boardY, keyNumber):
        BasicTile.__init__(self, boardX, boardY, "jimMorrison.png", "D")

        self.keyNum = keyNumber


class EmptyTile(BasicTile):
    def __init__(self, boardX, boardY):
        BasicTile.__init__(self, boardX, boardY, "nullAndVoid.png", "_")


class HintTile(BasicTile):
    def __init__(self, boardX, boardY):
        BasicTile.__init__(self, boardX, boardY, "hintsAreForRealChumps.png", "H")


class CrateTile(BasicTile):
    def __init__(self, boardX, boardY):
        BasicTile.__init__(self, boardX, boardY, "heartShapedBox.png", "B")


class DarkTile(BasicTile):
    def __init__(self, boardX, boardY):
        BasicTile.__init__(self, boardX, boardY, "areYouAfraidOfTheDark.png", "d")


class FireTile(BasicTile):
    def __init__(self, boardX, boardY):
        BasicTile.__init__(self, boardX, boardY, "burningFireOnTheDancefloor.png", "F")


class BoxTile(BasicTile):
    def __init__(self, boardX, boardY):
        BasicTile.__init__(self, boardX, boardY, "heartShapedBox.png", "B")


class GoalTile(BasicTile):
    def __init__(self, boardX, boardY):
        BasicTile.__init__(self, boardX, boardY, "", "G")


class FireShoesItem(BasicItem):
    def __init__(self, boardX, boardY):
        BasicItem.__init__(self, boardX, boardY, "pumpedUpKicks.png", "K")


WINDOWSIZEX = 1980
WINDOWSIZEY = 1080
BOARDSIZE = 880
MARGINSIZE = 100
TILESIZE = 80
FONTSIZE = 60
FPS = 30

PLAYER = "@"
GOAL = "G"
WALL = "W"
WATER = "w"
ICE = "I"
DOOR = "D"
DARK = "d"
EMPTY = "_"
HINT = "H"
BOX = "B"
FIRE = "F"
SHOES = "K"

PlayerX = -1
PlayerY = -1

GREEN = (0, 0, 128)
BLACK = (0, 0, 0)


def main():
    global FPSCLOCK, DISPLAYSURF, CHUMPFONT, SHOWNBOARD
    pygame.init()
    DISPLAYSURF = pygame.display.set_mode((WINDOWSIZE, WINDOWSIZE))
    pygame.display.set_caption("Chump's Challenge")
    FPSCLOCK = pygame.time.Clock()
    CHUMPFONT = pygame.font.Font("./Jumpman.ttf", FONTSIZE)
    SHOWNBOARD = Group()


    tileBoard = getBoard(1)

    while True:
         drawBoard(board)


def getBoard(levelNum):
    f = open(("level" + str(levelNum) + ".txt"), "r")
    rows = f.readlines()
    board = []
    for row in rows:
        TileRow = []
        for x in row.split(","):
            if not x== "\n":
                TileRow.append(x)
        board.append(TileRow)
    for x in range(len(board)):
        for y in range(len(board[x])):
            board[x][y] = getTextToTile(board[x][y], x, y)
    return board


def getTextToTile(tileStr, x, y):
    if tileStr == WALL:
        return WallTile(x, y)
    elif tileStr == WATER:
        return WaterTile(x, y)
    elif tileStr == ICE:
        return IceTile(x, y)
    elif tileStr == "0" or tileStr == "1" or tileStr == "2" or tileStr == "3":
        return DoorTile(x, y, tileStr)
    elif tileStr == EMPTY:
        return EmptyTile(x, y)
    elif tileStr == DARK:
        return DarkTile(x, y)
    elif tileStr == HINT:
        return HintTile(x, y)
    elif tileStr == FIRE:
        return FireTile(x, y)
    elif tileStr == BOX:
        return BoxTile(x, y)
    elif tileStr == SHOES:
        return FireShoesItem(x, y)
    elif tileStr == PLAYER:
        PlayerX = x
        PlayerY = y
        return EmptyTile(x, y)


def drawBoard(board):
    lEdge = 0
    rEdge = len(board[0])
    tEdge = 0
    bEdge = len(board)

    if PlayerX > 3:
        lEdge = PlayerX - 4
    if PlayerX < len(board[0]) - 4:
        rEdge = PlayerX + 4
    if PlayerY > 3:
        tEdge = PlayerY - 4
    if PlayerY < len(board) - 4:
        bEdge = PlayerY + 4
    SHOWNBOARD.clear()
    for y in range(tEdge, bEdge + 1):
        for x in range(lEdge, rEdge + 1):
            board[y][x].rect.x = boardToCoord(x - lEdge)
            board[y][x].rect.y = boardToCoord(y - tEdge)
            SHOWNBOARD.add(board[y][x])

    SHOWNBOARD.draw(DISPLAYSURF)


def boardToCoord(n):
    return MARGINSIZE + (n * TILESIZE)


def drawClock(new=False):
    FPSCLOCK.tick(FPS)
    timeNum = int(pygame.time.get_ticks() / 1000)
    timeStr = str(int(timeNum % 60))
    timeNum = timeNum - (timeNum % 60)
    minnum = 0
    while timeNum >= 60:
        minnum += 1
        timeNum -= 60
    if len(timeStr) == 1:
        timeStr = "0" + timeStr
    timeStr = str(minnum) + ":" + timeStr
    if new:
        timeStr = "0:00"
    timer = CHUMPFONT.render(timeStr, True, GREEN, BLACK)
    DISPLAYSURF.blit(timer, (10, 10))
