# Chump's Challenge
# By Calvin Probst calvin.probst@gmail.com
# https://github.com/calvinProbstSchool/chumpschallenge

import pygame
import sys
from pygame.sprite import *
from pygame.locals import *


class ChumpPlayer(Sprite):
    def __init__(self):
        Sprite.__init__(self)

        self.image = pygame.image.load(
            "DKDonkeyKongHesTheLeaderOfTheBunchYouKnowHimWellHesFinallyBackToKickSomeTailHisCoconutGunCanFireInSpurtsIfHeShootsYaItsGonnaHurtHesBiggerFasterAndStrongerTooHesTheFirstMemberOfTheDKCrewHuh.png")
        self.rect = self.image.get_rect()

        self.bX = -1
        self.bY = -1


class BasicTile(Sprite):
    def __init__(self, boardX, boardY, imageFilename, tType):
        Sprite.__init__(self)

        self.image = pygame.image.load(imageFilename)
        self.rect = self.image.get_rect()

        self.bX = boardX
        self.bY = boardY

        self.tileType = tType
        self.itemType = None


    def __str__(self):
        return ("A " + self.tileType + " at " + str(self.bX) + ", " + str(self.bY) + ".")


class BasicItem(BasicTile):
    def __init__(self, boardX, boardY, imageFilename, itemType):
        BasicTile.__init__(self, boardX, boardY, imageFilename, "_")

        self.itemType = itemType


    def __str__(self):
        return ("A " + self.itemType + " at " + str(self.bX) + ", " + str(self.bY) + ".")


class WallTile(BasicTile):
    def __init__(self, boardX, boardY):
        BasicTile.__init__(self, boardX, boardY, "shesABrickHouse.png", "W")


class IceTile(BasicTile):
    def __init__(self, boardX, boardY):
        BasicTile.__init__(self, boardX, boardY, "iceIceBaby.png", "I")


class WaterTile(BasicTile):
    def __init__(self, boardX, boardY):
        BasicTile.__init__(self, boardX, boardY, "vvaves(Kanye).png", "w")


class DoorTile(BasicTile):
    def __init__(self, boardX, boardY, keyNumber):
        BasicTile.__init__(self, boardX, boardY, "jimMorrison.png", "D")

        self.keyNum = keyNumber


class EmptyTile(BasicTile):
    def __init__(self, boardX, boardY):
        BasicTile.__init__(self, boardX, boardY, "nullAndVoid.png", "_")


class HintTile(BasicTile):
    def __init__(self, boardX, boardY):
        BasicTile.__init__(self, boardX, boardY, "hintsAreForRealChumps.png", "H")


class CrateTile(BasicTile):
    def __init__(self, boardX, boardY):
        BasicTile.__init__(self, boardX, boardY, "heartShapedBox.png", "B")


class DarkTile(BasicTile):
    def __init__(self, boardX, boardY):
        BasicTile.__init__(self, boardX, boardY, "areYouAfraidOfTheDark.png", "d")


class FireTile(BasicTile):
    def __init__(self, boardX, boardY):
        BasicTile.__init__(self, boardX, boardY, "burningFireOnTheDancefloor.png", "F")

#It takes 7:12 to reach the bottom give or take a bit with 2.1k tiles
#
#

class BoxTile(BasicTile):
    def __init__(self, boardX, boardY):
        BasicTile.__init__(self, boardX, boardY, "heartShapedBox.png", "B")


class GoalTile(BasicTile):
    def __init__(self, boardX, boardY):
        BasicTile.__init__(self, boardX, boardY, "", "G")


class FireShoesItem(BasicItem):
    def __init__(self, boardX, boardY):
        BasicItem.__init__(self, boardX, boardY, "pumpedUpKicks.png", "K")


class KeyItem(BasicItem):
    def __init__(self, boardX, boardY, keyN):
        BasicItem.__init__(self, boardX, boardY, "key1.png", "k")
        self.keyNum = keyN


WINDOWSIZEX = 1980
WINDOWSIZEY = 1080
BOARDSIZE = 720
MARGINSIZE = 100
TILESIZE = 80
FONTSIZE = 60
FPS = 30

PLAYER = "+"
GOAL = "G"
WALL = "W"
WATER = "w"
ICE = "I"
DOOR = "D"
DARK = "d"
EMPTY = "_"
HINT = "H"
BOX = "B"
FIRE = "F"
SHOES = "K"
KEY1 = "!"


DIRUP = "UP"
DIRRIGHT = "RIGHT"
DIRDOWN = "DOWN"
DIRLEFT = "LEFT"

playerX = -1
playerY = -1


GREEN = (0, 0, 128)
BLACK = (0, 0, 0)


def main():
    global FPSCLOCK, DISPLAYSURF, CHUMPFONT, SHOWNBOARD, CHUMP, SHOWNBOARDTOPLAYER, INVENTORY
    pygame.init()
    DISPLAYSURF = pygame.display.set_mode((WINDOWSIZEX, WINDOWSIZEY))
    pygame.display.set_caption("Chump's Challenge")
    FPSCLOCK = pygame.time.Clock()
    CHUMPFONT = pygame.font.Font("./Jumpman.ttf", FONTSIZE)
    SHOWNBOARD = Group()
    SHOWNBOARDTOPLAYER = Group()
    CHUMP = ChumpPlayer()

    tileBoard = getBoard(2)
    INVENTORY = []
    for i in range(0, 3):
        row = []
        for j in range(0, 3):
            row.append(None)
        INVENTORY.append(row)


    mousex = 0
    mousey = 0
    gamePlaying = True

    while True:
        DISPLAYSURF.fill(BLACK)
        drawBoard(tileBoard)
        pygame.display.update()
        FPSCLOCK.tick()

        mouseDown = False
        keyPress = False
        keyDir = ""

        for event in pygame.event.get():
            if event.type == QUIT or (event.type == KEYUP and event.key == K_ESCAPE):
                pygame.quit()
                sys.exit()
            elif event.type == KEYUP:
                if event.key == K_LEFT:
                    keyPress = True
                    keyDir = DIRLEFT
                elif event.key == K_RIGHT:
                    keyPress = True
                    keyDir = DIRRIGHT
                elif event.key == K_UP:
                    keyPress = True
                    keyDir = DIRUP
                elif event.key == K_DOWN:
                    keyPress = True
                    keyDir = DIRDOWN
            elif event.type == MOUSEMOTION:
                mousex, mousey = event.pos
            elif event.type == MOUSEBUTTONUP:
                mousex, mousey = event.pos
                mouseDown = True

        if keyPress and gamePlaying:
            movePlayer(tileBoard, keyDir)

        if gameWin(tileBoard):
            print("next level")



def getBoard(levelNum):
    f = open(("level" + str(levelNum) + ".txt"), "r")
    rows = f.readlines()
    board = []
    for row in rows:
        TileRow = []
        for x in row.split(","):
            if not x== "\n":
                TileRow.append(x)
        board.append(TileRow)
    for y in range(len(board)):
        for x in range(len(board[y])):
            board[y][x] = getTextToTile(board[y][x], x, y)
    return board


def getEmptyInventorySpace():
    global INVENTORY
    for y in range(0, 3):
        for x in range(0, 3):
            if INVENTORY[y][x] is None:
                return x, y

    INVENTORY[0][0] = None
    for y in range(0, 3):
        for x in range(0, 3):
            if x == 2 and not y == 2:
                INVENTORY[y][x] = INVENTORY[y + 1][0]
            elif not (x == 2 and y == 2):
                INVENTORY[y][x] = INVENTORY[y][x + 1]
    INVENTORY[2][2] = None
    return (2, 2)



def getTextToTile(tileStr, x, y):
    global playerX, playerY
    if tileStr == WALL:
        return WallTile(x, y)
    elif tileStr == WATER:
        return WaterTile(x, y)
    elif tileStr == ICE:
        return IceTile(x, y)
    elif tileStr == "0" or tileStr == "1" or tileStr == "2" or tileStr == "3":
        return DoorTile(x, y, tileStr)
    elif tileStr == EMPTY:
        return EmptyTile(x, y)
    elif tileStr == DARK:
        return DarkTile(x, y)
    elif tileStr == HINT:
        return HintTile(x, y)
    elif tileStr == FIRE:
        return FireTile(x, y)
    elif tileStr == BOX:
        return BoxTile(x, y)
    elif tileStr == SHOES:
        return FireShoesItem(x, y)
    elif tileStr == KEY1:
        return KeyItem(x, y, 1)
    elif tileStr == PLAYER:
        playerX = x
        playerY = y
        return EmptyTile(x, y)


def gameWin(board):
    return False


def tileInDir(x, y, dir):
    if dir == DIRDOWN:
        return (x, y + 1)
    elif dir == DIRUP:
        return (x, y - 1)
    elif dir == DIRLEFT:
        return (x - 1, y)
    elif dir == DIRRIGHT:
        return (x + 1, y)


def movePlayer(board, dir):
    global playerX, playerY, INVENTORY
    movePos = tileInDir(playerX, playerY, dir)
    moveTile = board[movePos[1]][movePos[0]]
    moveType = moveTile.tileType
    if moveType == EMPTY:
        playerX = movePos[0]
        playerY = movePos[1]
        if not moveTile.itemType is None:
            invX, invY = getEmptyInventorySpace()
            INVENTORY[invY][invX] = moveTile
            board[movePos[1]][movePos[0]] = EmptyTile(movePos[0], movePos[1])
    elif moveType == BOX:
        boxMovePos = tileInDir(movePos[0], movePos[1], dir)
        boxMoveTile = board[boxMovePos[1]][boxMovePos[0]]
        boxMoveType = boxMoveTile.tileType
        if boxMoveType == EMPTY:
            playerX = movePos[0]
            playerY = movePos[1]
            board[movePos[1]][movePos[0]].bX, board[movePos[1]][movePos[0]].bY = boxMovePos
            board[boxMovePos[1]][boxMovePos[0]].bX, board[boxMovePos[1]][boxMovePos[0]].bY = movePos
            placeholderTile = board[movePos[1]][movePos[0]]
            board[movePos[1]][movePos[0]] = board[boxMovePos[1]][boxMovePos[0]]
            board[boxMovePos[1]][boxMovePos[0]] = placeholderTile
        elif boxMoveType == FIRE:
            playerX = movePos[0]
            playerY = movePos[1]
            board[movePos[1]][movePos[0]] = EmptyTile(movePos[0], movePos[1])
            board[boxMovePos[1]][boxMovePos[0]] = EmptyTile(boxMovePos[0], boxMovePos[1])


def drawBoard(board):
    global playerX, playerY, INVENTORY
    lEdge = 0
    rEdge = len(board[0])
    tEdge = 0
    bEdge = len(board)

    if playerX > 3:
        lEdge = playerX - 4

    if playerX < len(board[0]) - 4:
        rEdge = playerX + 5

    if playerY > 3:
        tEdge = playerY - 4

    if playerY < len(board) - 4:
        bEdge = playerY + 5

    SHOWNBOARD.empty()
    SHOWNBOARDTOPLAYER.empty()

    for y in range(tEdge, bEdge):
        for x in range(lEdge, rEdge):
            board[y][x].rect.x = boardToCoord(x - lEdge)
            board[y][x].rect.y = boardToCoord(y - tEdge)
            SHOWNBOARD.add(board[y][x])
    for y in range(0, 3):
        for x in range(0, 3):
            if not INVENTORY[y][x] is None:
                INVENTORY[y][x].rect.x, INVENTORY[y][x].rect.y = invToCoord(x, y)
                SHOWNBOARD.add(INVENTORY[y][x])
    drawClock()
    CHUMP.rect.x = boardToCoord(playerX - lEdge)
    CHUMP.rect.y = boardToCoord(playerY - tEdge)
    SHOWNBOARDTOPLAYER.add(CHUMP)
    pygame.draw.rect(DISPLAYSURF, (0, 100, 40), (MARGINSIZE, MARGINSIZE, BOARDSIZE, BOARDSIZE))
    SHOWNBOARD.draw(DISPLAYSURF)
    SHOWNBOARDTOPLAYER.draw(DISPLAYSURF)


def boardToCoord(n):
    return MARGINSIZE + (n * TILESIZE)


def invToCoord(x, y):
    return ((MARGINSIZE * 2) + BOARDSIZE + (x * TILESIZE + 20)), (MARGINSIZE + (y * TILESIZE + 20))


def drawClock(new=False):
    FPSCLOCK.tick(FPS)
    timeNum = int(pygame.time.get_ticks() / 1000)
    timeStr = str(int(timeNum % 60))
    timeNum = timeNum - (timeNum % 60)
    minnum = 0
    while timeNum >= 60:
        minnum += 1
        timeNum -= 60
    if len(timeStr) == 1:
        timeStr = "0" + timeStr
    timeStr = str(minnum) + ":" + timeStr
    if new:
        timeStr = "0:00"
    timer = CHUMPFONT.render(timeStr, True, GREEN, BLACK)
    DISPLAYSURF.blit(timer, ((2 * MARGINSIZE) + BOARDSIZE, 10))


main()